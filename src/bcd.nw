\section{Bytecode disassembler}
<<bcd.spec>>=
address type is "unsigned char *"
address add using "%a + %o"
address to integer using "(unsigned)%a"
fetch 8 using "*%a"
<<bcd.m>>=
#include <ctype.h>

static void print_signed_n(int n) {
  printf(" %d", n);
}

extern int showsize;

void disassemble(unsigned char *pc) {
  unsigned char *npc;

  for (;; pc = npc) {
    match [npc] pc to
    | clv_orb(n) => 
	print_signed_n(n);
	printf(" clv_orb");
    | clv(n) => 
	print_signed_n(n);
	printf(" clv");
    | cla_force(n) => 
	print_signed_n(n);
	printf(" cla_force");
    | cl_loc_force() =>
        printf(" cl_loc_force");
    | cla(n) => 
	print_signed_n(n);
	printf(" cla");
    | emit_at_loc(n) => 
	print_signed_n(n);
	printf(" emit_at_loc");
    | bitshift(n) => 
	print_signed_n(n);
	printf(" bitshift");
    | addlit(n) => 
	print_signed_n(n);
	printf(" addlit");
    | bitslice(lo, hi) => 
	print_signed_n(lo);
	print_signed_n(hi);
	printf(" bitslice");
    | unsat() => 
	printf(" unsat");
    | narrowu(n) => 
	print_signed_n(n);
	printf(" narrowu");
    | halt() => 
	printf(" halt");
	printf("\n");
	return;
    | narrows(n) => 
	print_signed_n(n);
	printf(" narrows");
    | fitss(n) => 
	print_signed_n(n);
	printf(" fitss");
    | fitsu(n) => 
	print_signed_n(n);
	printf(" fitsu");
    | widen(n) => 
	print_signed_n(n);
	printf(" widen");
    | emit_at(n) => 
	print_signed_n(n);
	printf(" emit_at");
    | sint(n) => 
	print_signed_n(n);
	printf(" sint");
    | failmsg() => 
	printf(" failmsg");
    | neg() => 
	printf(" neg");
    | if_guard() => 
	printf(" if_guard");
    | known() => 
	printf(" known");
    | force() => 
	printf(" force");
    | cl_loc() => 
	printf(" cl_loc");
    | mod() => 
	printf(" mod");
    | idiv() => 
	printf(" idiv");
    | mul() => 
	printf(" mul");
    | sub() => 
	printf(" sub");
    | add() => 
	printf(" add");
    | not() => 
	printf(" not");
    | and() => 
	printf(" and");
    | orb() => 
	printf(" orb");
    | true() => 
	printf(" true");
    | false() => 
	printf(" false");
    | eq() => 
	printf(" eq");
    | ne() => 
	printf(" ne");
    | ge() => 
	printf(" ge");
    | gt() => 
	printf(" gt");
    | le() => 
	printf(" le");
    | lt() => 
	printf(" lt");
    | null() => 
	printf(" null");
    | stringlit() => 
	printf(" stringlit");
    | proc() => 
	printf(" }");
    | procmark() => 
	printf(" {");
    | set() => 
	printf(" ] set");
    | array() => 
	printf(" ]");
    | mark() => 
	printf(" [");
    endmatch
    if (showsize) {
      unsigned char *s;
      printf(" %% (%d: ", npc - pc);
      for (s = pc; s < npc; s++)
        if (isprint(*s)) printf("%c", *s);
        else             printf("\\x%02x", *s);
      printf(")\n");
    }
  }
}
