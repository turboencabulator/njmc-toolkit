<<sx.asdl>>=
module Sx {
  sx = ATOM (string)
     | INT (int)
     | STRING (string)
     | CONS (sx, sx)
     | NIL
}
@ 
<<sxutil.sig>>=
signature SX_UTIL = sig
  val list : Sx.sx list -> Sx.sx
end
<<sxutil.sml>>=
structure SxUtil : SX_UTIL = struct
  val list = foldr Sx.CONS Sx.NIL
end
<<sx.sig>>=
(* Machine generated. Edit at your own risk 
   Reproduce with the following
  --base_signature BASE
  --base_structure Base
  --line_width 74
  --no_action false
  --output_directory .
  --split_modules false
  --view SML
  *)
signature Sx_SIG = 
    sig
(*    include BASE *)
    
    datatype sx = ATOM of (string)
                | INT of (int)
                | STRING of (string)
                | CONS of (sx * sx)
                | NIL
    
(*
    val write_sx : sx -> outstream -> unit
    val write_tagged_sx : sx -> outstream -> unit
    val read_sx : instream -> sx
    val read_tagged_sx : instream -> sx
*)
    
    
end
<<sx.sml>>=
(* Machine generated. Edit at your own risk 
   Reproduce with the following
  --base_signature BASE
  --base_structure Base
  --line_width 74
  --no_action false
  --output_directory .
  --split_modules false
  --view SML
  *)
structure Sx : Sx_SIG = 
    struct
(*    open Base *)
    
    datatype sx = ATOM of (string)
                | INT of (int)
                | STRING of (string)
                | CONS of (sx * sx)
                | NIL
    
(*
    fun write_sx x s = 
            (case (x) of 
                  (ATOM(string1)) =>
                    ((write_tag 1 s); (write_string string1 s))
                | (INT(int1)) => ((write_tag 2 s); (write_int int1 s))
                | (STRING(string1)) =>
                    ((write_tag 3 s); (write_string string1 s))
                | (CONS(sx1, sx2)) =>
                    ((write_tag 4 s); (write_sx sx1 s); (write_sx sx2 s))
                | NIL => ((write_tag 5 s)))
    and write_tagged_sx x s = 
            ((write_tag 4 s); (write_sx x s))
    and read_sx s = 
            (case ((read_tag s)) of 
                  1 =>
                    let 
                        val string1 =  (read_string s)
                    in
                        ATOM(string1)
                    end
                | 2 =>
                    let 
                        val int1 =  (read_int s)
                    in
                        INT(int1)
                    end
                | 3 =>
                    let 
                        val string1 =  (read_string s)
                    in
                        STRING(string1)
                    end
                | 4 =>
                    let 
                        val sx1 =  (read_sx s)
                        val sx2 =  (read_sx s)
                    in
                        CONS(sx1, sx2)
                    end
                | 5 => NIL
                | _ => (die ()))
    and read_tagged_sx s = 
            (case ((read_tag s)) of 
                  4 => (read_sx s)
                | _ => (die ()))
    
*)    
    
end
@ 

