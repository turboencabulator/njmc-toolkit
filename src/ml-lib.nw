% -*- mode: Noweb; noweb-code-mode: sml-mode -*-
@
\chapter{ML runtime library}
Note that the signatures used in ML emission must match these
signatures.
Indeed, one could argue for moving that code here!
@
Here is a possible emitter at which the ML bindings could be targeted.
I don't yet have the emission code working, so I can't yet comment
about how this fits in, but a code emitter might be parameterized by
something like this.
<<ml-lib.sig>>=
signature INSTRUCTION_EMITTER = sig
  type token_stream
  val emit32 : Word32.word * token_stream -> token_stream
  val emit16 : word        * token_stream -> token_stream
  val emit : { value : Word32.word, width : word } * token_stream -> token_stream
end
@
In ML, we can talk about very general relocatable addresses.
The intent is that there exist a [[force]] procedure with type
\mbox{[['a relocatable -> 'a option]]}.
I don't put such a procedure in the signature, because this signature
must be implemented by the user of the toolkit, and I want not to
insist on a version that uses mutable state.
<<ml-lib.sig>>=
signature RELOCATABLE = sig
  type 'a relocatable
end
@
Span-dependent instructions may have a range of sizes.
If we know the location of an instruction and the values of
relocatable addresses on which it may depend, we can find its exact size.
<<ml-lib.sig>>=
signature INSTRUCTION_SIZE = sig
  type instruction
  type address       (* location of instruction, value of relocatable operands
                        --- an integer type *)
  structure Reloc : RELOCATABLE
  val sizeRange : {inst : instruction} -> { min : word, max : word }
  val size      : { inst   : instruction
		  , cur_pc : word option
		  , force  : address Reloc.relocatable -> address option
		  } -> word
end
@ 
The ML encoder might not throw off closures.
Instead, it's likely to be called only when all locations are known.
In any case, that's one possible assumption.
This signature will undoubtedly change.
<<ml-lib.sig>>=
signature INSTRUCTION_ENCODER = sig
  type instruction 
  type address
  structure Reloc : RELOCATABLE
  structure Emitter : INSTRUCTION_EMITTER

  val encodeAt :
    instruction * address * (address Reloc.relocatable -> address) 
    * Emitter.token_stream
        -> Emitter.token_stream
end
@ 
The main thing that's needed here is the exception, which is raised
when an instruction can't be encoded.
[[cons]] and [[nil']] exist to support the creation of lists of
strings, but in practice they should be rewritten to use the standard
ML notation for lists.
<<ml-lib.sml>>=
structure SledLibrary = struct
  exception Failure of string list  (* raised on failure to encode *)
  val cons = op ::
  val nil' = []
end

