The following emitters emit raw bits using pseudo-ops 
in the target architecture's assembly language.  
They are used by the toolkit checker to compare the output of the
toolkit to the binary output produced by the target's assembler.

We start with the Pentium.
<<external declarations>>=
void emitbits(unsigned long val, unsigned n);
<<pentium bits emitter>>=
#include <mclib.h>
#include <assert.h>
#include <stdio.h>
void emitbits(val, n) unsigned long val; unsigned n; {
  switch (n) {
  case sizeof(unsigned char):  
    printf("\t.byte 0x%01x\n", (unsigned char)val); break; 
  case sizeof(unsigned short): 
    printf("\t.word 0x%04x\n", (unsigned short)val); break; 
  case sizeof(unsigned):       
    printf("\t.long 0x%08x\n", val); break; 
  default: assert(0); 
  }  
  addlc(n);
}
@ The MIPS and SPARC directives are identical.
<<mips bits emitter>>=
#include <mclib.h>
#include <assert.h>
#include <stdio.h>
void emitbits(val, n) unsigned long val; unsigned n; {
  switch (n) {
  case sizeof(unsigned char):  
    printf("\t.byte 0x%01x\n", (unsigned char)val); break; 
  case sizeof(unsigned short): 
    printf("\t.half 0x%04x\n", (unsigned short)val); break; 
  case sizeof(unsigned):       
    printf("\t.word 0x%08x\n", val); break; 
  default: assert(0);
  }  
  addlc(n);
}
  
<<sparc bits emitter>>=
<<mips bits emitter>>
@ 
The Alpha still thinks a word is 16~bits.
<<alpha bits emitter>>=
#include <mclib.h>
#include <assert.h>
#include <stdio.h>
void emitbits(val, n) unsigned long val; unsigned n; {
  switch (n) {
  case sizeof(unsigned char):  
    printf("\t.byte 0x%01x\n", (unsigned char)val); break; 
  case sizeof(unsigned short): 
    printf("\t.word 0x%04x\n", (unsigned short)val); break; 
  case sizeof(unsigned):       
    printf("\t.long 0x%08x\n", val); break; 
  default: assert(0);
  }  
  addlc(n);
}
<<header>>=
<<external declarations>>
